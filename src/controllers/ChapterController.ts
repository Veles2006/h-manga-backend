import { Request, Response } from 'express';
import mongoose from 'mongoose';
import Comic from '@/models/Comic';
import Chapter from '@/models/Chapter';

class ChapterController {
    // üìå L·∫•y t·∫•t c·∫£ ch∆∞∆°ng c·ªßa m·ªôt truy·ªán
    async getChapters(req: Request, res: Response): Promise<void> {
        const { slug } = req.params;

        try {
            const comic = await Comic.findOne({ slug });
            if (!comic) {
                res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y truy·ªán' });
                return;
            }

            const chapters = await Chapter.find({ comic: comic._id }).sort({ number: -1 });

            const formatted = chapters.map((chap) => {
                const rawDate = chap.updatedAt ?? new Date(); // fallback n·∫øu null/undefined
                const updatedAt = new Date(rawDate);

                const day = String(updatedAt.getDate()).padStart(2, '0');
                const month = String(updatedAt.getMonth() + 1).padStart(2, '0');
                const year = updatedAt.getFullYear();

                return {
                    ...chap.toObject(),
                    updatedAt: `${day}/${month}/${year}`,
                };
            });

            res.status(200).json(formatted);
        } catch (error) {
            console.error('‚ùå getChapters error:', error);
            res.status(500).json({ message: 'L·ªói server', error });
        }
    }

    // üìå L·∫•y m·ªôt ch∆∞∆°ng c·ª• th·ªÉ
    async getChapter(req: Request, res: Response): Promise<void> {
        const { slug, chapter } = req.params;

        try {
            const chapterNumber = Number(chapter);
            if (isNaN(chapterNumber)) {
                res.status(400).json({ message: 'S·ªë ch∆∞∆°ng kh√¥ng h·ª£p l·ªá' });
                return;
            }

            const comic = await Comic.findOne({ slug });
            if (!comic) {
                res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y truy·ªán' });
                return;
            }

            const chapterDoc = await Chapter.findOne({
                comic: comic._id,
                number: chapterNumber,
            }).lean();

            if (!chapterDoc) {
                res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y ch∆∞∆°ng' });
                return;
            }

            res.status(200).json(chapterDoc);
        } catch (error) {
            console.error('‚ùå getChapter error:', error);
            res.status(500).json({ message: 'L·ªói server', error });
        }
    }

    // üìå T·∫°o ch∆∞∆°ng m·ªõi
    async createChapter(req: Request, res: Response): Promise<void> {
        const { slug } = req.params;
        const { number } = req.body;

        try {
            const files = req.files as Express.Multer.File[]; // an to√†n h∆°n
            if (!files || files.length === 0) {
                res.status(400).json({ message: 'Vui l√≤ng t·∫£i l√™n √≠t nh·∫•t m·ªôt ·∫£nh!' });
                return;
            }

            const comic = await Comic.findOne({ slug });
            if (!comic) {
                res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y truy·ªán' });
                return;
            }

            const chapterNumber = parseInt(number, 10);
            if (isNaN(chapterNumber) || chapterNumber < 0) {
                res.status(400).json({ message: 'S·ªë ch∆∞∆°ng kh√¥ng h·ª£p l·ªá!' });
                return;
            }

            const images = files.map((file) => file.path);

            const chapter = new Chapter({
                comic: comic._id,
                number: chapterNumber,
                images,
            });

            await chapter.save();
            comic.chapters += 1;
            await comic.save();

            res.status(201).json({
                message: 'T·∫°o ch∆∞∆°ng th√†nh c√¥ng!',
                chapter,
            });
        } catch (error) {
            console.error('‚ùå createChapter error:', error);
            res.status(500).json({ message: 'C√≥ l·ªói x·∫£y ra', error });
        }
    }
}

export default new ChapterController();
